"""
–ü—Ä–æ–≥—Ä–∞–º–º–∞ –¥–ª—è –∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è/–¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ –≤ –∞–∑–±—É–∫—É –ú–æ—Ä–∑–µ –∏ –æ–±—Ä–∞—Ç–Ω–æ.
–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –∞–Ω–≥–ª–∏–π—Å–∫–∏–π –∏ —Ä—É—Å—Å–∫–∏–π —è–∑—ã–∫–∏, –∞ —Ç–∞–∫–∂–µ –æ—Å–Ω–æ–≤–Ω—ã–µ –ø—É–Ω–∫—Ç—É–∞—Ü–∏–æ–Ω–Ω—ã–µ –∑–Ω–∞–∫–∏.

https://github.com/Chistiy-fun/Azbuka-Morze.git
"""

# –°–ª–æ–≤–∞—Ä–∏ –¥–ª—è –∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è —Å–∏–º–≤–æ–ª–æ–≤ –≤ –∞–∑–±—É–∫—É –ú–æ—Ä–∑–µ
forward_en = {
    # –õ–∞—Ç–∏–Ω—Å–∫–∏–µ –±—É–∫–≤—ã A-Z
    'A': '.-', 'B': '-...', 'C': '-.-.', 'D': '-..', 'E': '.', 'F': '..-.',
    'G': '--.', 'H': '....', 'I': '..', 'J': '.---', 'K': '-.-', 'L': '.-..',
    'M': '--', 'N': '-.', 'O': '---', 'P': '.--.', 'Q': '--.-', 'R': '.-.',
    'S': '...', 'T': '-', 'U': '..-', 'V': '...-', 'W': '.--', 'X': '-..-',
    'Y': '-.--', 'Z': '--..',

    # –¶–∏—Ñ—Ä—ã 0-9
    '0': '-----', '1': '.----', '2': '..---', '3': '...--', '4': '....-',
    '5': '.....', '6': '-....', '7': '--...', '8': '---..', '9': '----.',

    # –°–ø–µ—Ü—Å–∏–º–≤–æ–ª—ã –∏ –ø—É–Ω–∫—Ç—É–∞—Ü–∏—è
    ' ': ' ', ',': '--..--', '.': '.-.-.-', '?': '..--..', "'": '.----.',
    '!': '-.-.--', '/': '-..-.', '(': '-.--.', ')': '-.--.-', '&': '.-...',
    ':': '---...', ';': '-.-.-.', '=': '-...-', '+': '.-.-.', '-': '-....-',
    '_': '..--.-', '"': '.-..-.', '$': '...-..-', '@': '.--.-.'
}

forward_ru = {
    # –†—É—Å—Å–∫–∏–µ –±—É–∫–≤—ã –ê-–Ø
    '–ê': '.-', '–ë': '-...', '–í': '.--', '–ì': '--.', '–î': '-..', '–ï': '.',
    '–ñ': '...-', '–ó': '--..', '–ò': '..', '–ô': '.---', '–ö': '-.-',
    '–õ': '.-..', '–ú': '--', '–ù': '-.', '–û': '---', '–ü': '.--.', '–†': '.-.',
    '–°': '...', '–¢': '-', '–£': '..-', '–§': '..-.', '–•': '....', '–¶': '-.-.',
    '–ß': '---.', '–®': '----', '–©': '--.-', '–™': '--.--', '–´': '-.--',
    '–¨': '-..-', '–≠': '..-..', '–Æ': '..--', '–Ø': '.-.-',

    # –¶–∏—Ñ—Ä—ã 0-9 (–∞–Ω–∞–ª–æ–≥–∏—á–Ω–æ –∞–Ω–≥–ª–∏–π—Å–∫–æ–π –≤–µ—Ä—Å–∏–∏)
    '0': '-----', '1': '.----', '2': '..---', '3': '...--', '4': '....-',
    '5': '.....', '6': '-....', '7': '--...', '8': '---..', '9': '----.',

    # –°–ø–µ—Ü—Å–∏–º–≤–æ–ª—ã –∏ –ø—É–Ω–∫—Ç—É–∞—Ü–∏—è
    ' ': ' ', ',': '--..--', '.': '.-.-.-', '?': '..--..', "'": '.----.',
    '!': '-.-.--', '/': '-..-.', '(': '-.--.', ')': '-.--.-', '=': '-...-',
    '+': '.-.-.', '-': '-....-', '_': '..--.-', '"': '.-..-.', ':': '---...',
}

# –°–æ–∑–¥–∞–µ–º –æ–±—Ä–∞—Ç–Ω—ã–µ —Å–ª–æ–≤–∞—Ä–∏ –¥–ª—è –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è
reverse_en = {v: k for k, v in forward_en.items()}
reverse_ru = {v: k for k, v in forward_ru.items()}

# –û—Å–Ω–æ–≤–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ —Å–ª–æ–≤–∞—Ä—è–º
MorseCode = {
    'forward': {'en': forward_en, 'ru': forward_ru},  # –î–ª—è –∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è
    'reverse': {'en': reverse_en, 'ru': reverse_ru}  # –î–ª—è –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è
}


def encode_to_morse(text: str, lang: str):
    """
    –ö–æ–¥–∏—Ä—É–µ—Ç —Ç–µ–∫—Å—Ç –≤ –∞–∑–±—É–∫—É –ú–æ—Ä–∑–µ
    :param text: –ò—Å—Ö–æ–¥–Ω—ã–π —Ç–µ–∫—Å—Ç –¥–ª—è –∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è
    :param lang: –Ø–∑—ã–∫ ('en' –∏–ª–∏ 'ru')
    :return: –°—Ç—Ä–æ–∫–∞ –≤ –∞–∑–±—É–∫–µ –ú–æ—Ä–∑–µ
    """
    converter = MorseCode['forward'][lang]
    encoded = []

    for char in text.upper():
        if char not in converter:
            # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –Ω–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Å–∏–º–≤–æ–ª—ã —Å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ–º
            print(f"‚ö†Ô∏è –í–Ω–∏–º–∞–Ω–∏–µ: —Å–∏–º–≤–æ–ª '{char}' –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è –∏ –±—É–¥–µ—Ç –ø—Ä–æ–ø—É—â–µ–Ω")
            continue
        encoded.append(converter[char])

    return ' '.join(encoded)


def decode_from_morse(code: str, lang: str):
    """
    –î–µ–∫–æ–¥–∏—Ä—É–µ—Ç –∞–∑–±—É–∫—É –ú–æ—Ä–∑–µ –æ–±—Ä–∞—Ç–Ω–æ –≤ —Ç–µ–∫—Å—Ç
    :param code: –ö–æ–¥ –ú–æ—Ä–∑–µ –¥–ª—è –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è
    :param lang: –Ø–∑—ã–∫ ('en' –∏–ª–∏ 'ru')
    :return: –†–∞—Å–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç
    """
    converter = MorseCode['reverse'][lang]
    decoded = []
    unknown_symbols = []

    for symbol in code.split(' '):
        # if not symbol:
        #     continue  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏
        if symbol in converter:
            decoded.append(converter[symbol])
        else:
            unknown_symbols.append(symbol)
            decoded.append(' ')  # –ó–∞–º–µ–Ω—è–µ–º –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã

    if unknown_symbols:
        print(f"‚ö†Ô∏è –í–Ω–∏–º–∞–Ω–∏–µ: –Ω–µ—Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã –ú–æ—Ä–∑–µ: {', '.join(unknown_symbols)}")

    return ''.join(decoded)


def get_language_choice():
    """–ü–æ–ª—É—á–∞–µ—Ç –∏ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –≤—ã–±–æ—Ä —è–∑—ã–∫–∞"""
    while True:
        print("\n–í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫:")
        print("1. –ê–Ω–≥–ª–∏–π—Å–∫–∏–π (EN)")
        print("2. –†—É—Å—Å–∫–∏–π (RU)")
        print("0. –í—ã—Ö–æ–¥")

        try:
            choice = int(input("–í–∞—à –≤—ã–±–æ—Ä: "))
            if choice == 0:
                exit()
            if choice in (1, 2):
                return 'en' if choice == 1 else 'ru'
            print("‚õî –û—à–∏–±–∫–∞: –≤–≤–µ–¥–∏—Ç–µ 1, 2 –∏–ª–∏ 0 –¥–ª—è –≤—ã—Ö–æ–¥–∞")
        except ValueError:
            print("‚õî –û—à–∏–±–∫–∞: –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ!")


def get_operation_choice():
    """–ü–æ–ª—É—á–∞–µ—Ç –∏ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –≤—ã–±–æ—Ä –æ–ø–µ—Ä–∞—Ü–∏–∏"""
    while True:
        print("\n–í—ã–±–µ—Ä–∏—Ç–µ –æ–ø–µ—Ä–∞—Ü–∏—é:")
        print("1. –ö–æ–¥–∏—Ä–æ–≤–∞—Ç—å —Ç–µ–∫—Å—Ç –≤ –ú–æ—Ä–∑–µ")
        print("2. –î–µ–∫–æ–¥–∏—Ä–æ–≤–∞—Ç—å –ú–æ—Ä–∑–µ –≤ —Ç–µ–∫—Å—Ç")
        print("0. –ù–∞–∑–∞–¥")

        try:
            choice = int(input("–í–∞—à –≤—ã–±–æ—Ä: "))
            if choice == 0:
                return -1
            if choice in (1, 2):
                return choice
            print("‚õî –û—à–∏–±–∫–∞: –≤–≤–µ–¥–∏—Ç–µ 1, 2 –∏–ª–∏ 0 –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞")
        except ValueError:
            print("‚õî –û—à–∏–±–∫–∞: –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ!")


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≥—Ä–∞–º–º—ã"""
    print("\n" + "‚ïê" * 50)
    print("üåü –ú–æ—Ä–∑–µ-—Ç—Ä–∞–Ω—Å–ª—è—Ç–æ—Ä v2.0".center(50))
    print("‚ïê" * 50)
    print("–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Å–∏–º–≤–æ–ª—ã:")
    print("- –õ–∞—Ç–∏–Ω—Å–∫–∏–µ/—Ä—É—Å—Å–∫–∏–µ –±—É–∫–≤—ã –∏ —Ü–∏—Ñ—Ä—ã")
    print("- –û—Å–Ω–æ–≤–Ω—ã–µ –ø—É–Ω–∫—Ç—É–∞—Ü–∏–æ–Ω–Ω—ã–µ –∑–Ω–∞–∫–∏")
    print("- –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã: $@& –∏ –¥—Ä—É–≥–∏–µ")
    print("‚ïê" * 50)

    while True:
        lang = get_language_choice()
        if not lang:
            continue

        while True:
            operation = get_operation_choice()
            if operation == -1:
                break  # –í–æ–∑–≤—Ä–∞—Ç –∫ –≤—ã–±–æ—Ä—É —è–∑—ã–∫–∞

            try:
                if operation == 1:
                    text = input("\n–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è –∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è:\n¬ª ")
                    result = encode_to_morse(text, lang)
                    print("\nüîí –†–µ–∑—É–ª—å—Ç–∞—Ç –∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è:")
                    print(f"‚ñ∏ {result}")
                else:
                    code = input("\n–í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –ú–æ—Ä–∑–µ –¥–ª—è –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è (—Ä–∞–∑–¥–µ–ª—è–π—Ç–µ —Å–∏–º–≤–æ–ª—ã –ø—Ä–æ–±–µ–ª–∞–º–∏):\n¬ª ")
                    result = decode_from_morse(code, lang)
                    print("\nüîì –†–µ–∑—É–ª—å—Ç–∞—Ç –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è:")
                    print(f"‚ñ∏ {result}")

                # –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å
                print("\n" + "‚îÄ" * 50)
                choice = input("–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å? (–¥–∞/–Ω–µ—Ç): ").lower()
                if choice not in ('–¥–∞', '–¥', 'yes', 'y'):
                    print("–ü—Ä–æ–≥—Ä–∞–º–º–∞ –∑–∞–≤–µ—Ä—à–∏–ª–∞ —Ä–∞–±–æ—Ç—É.\n–°–ø–∞—Å–∏–±–æ, —á—Ç–æ –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏—Å—å –ø—Ä–æ–≥—Ä–∞–º–º–æ–π!")
                    return
                print("‚îÄ" * 50)

            except Exception as e:
                print(f"‚õî –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {str(e)}")
                return


main()